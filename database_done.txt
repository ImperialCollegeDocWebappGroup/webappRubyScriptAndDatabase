=============================
Table "public.publishs"
 Column  |     Type      | Modifiers
---------+---------------+-----------
 usrname | character(15) | not null
 shows   | publishitem[] |

 Indexes:
    "uniqueuname2" UNIQUE CONSTRAINT, btree (usrname)
Foreign-key constraints:
    "publishs_usrname_fkey" FOREIGN KEY (usrname) REFERENCES userprofile(login)
============================
composite type : publishitem
 Column    |            Type             | Modifiers
-------------+-----------------------------+-----------
 content     | character varying(200)      |
 publishtime | timestamp without time zone |
==========================
  Table "public.friendlist"
 Column  |     Type      | Modifiers 
---------+---------------+-----------
 uname   | character(15) | not null
 friends | text[]        | not null
Indexes:
    "uniqueuname" UNIQUE CONSTRAINT, btree (uname)
Foreign-key constraints:
    "friendlist_uname_fkey" FOREIGN KEY (uname) REFERENCES userprofile(login)

==========================
   Table "public.userprofile"
   Column   |     Type      | Modifiers 
------------+---------------+-----------
 login      | character(15) | not null
 name       | text          | not null
 gender     | boolean       | 
 age        | integer       | not null
 height     | integer       | not null
 weight     | integer       | not null
 skincolour | integer       | not null
 clothes    | text[]        | 
 friends    | text[]        | 
 wholelook  | text[]        | 
 comments   | text[]        | 
Indexes:
    "userprofile_pkey" PRIMARY KEY, btree (login)
Referenced by:
    TABLE "friendlist" CONSTRAINT "friendlist_uname_fkey" FOREIGN KEY (uname) REFERENCES userprofile(login)
    TABLE "publishs" CONSTRAINT "publishs_usrname_fkey" FOREIGN KEY (usrname) REFERENCES userprofile(login)

==========================


==========================
==========================

CREATE TABLE friendlist(uname character(15) references userprofile(login) not null, friends text[] not null);


INSERT INTO friendlist VALUES ('Sam', ARRAY['nathan']);



INSERT INTO friendlist VALUES ('nathan', ARRAY['Sam']);

INSERT INTO userprofile VALUES ('Sam2', 'Jiahao2', true, 30, 170, 65, 6, ARRAY['http://www.selfridges.com/en/givenchy-amerika-cuban-fit-cotton-jersey-t-shirt_242-3000831-15S73176511/?previewAttribute=Black']);

DELETE FROM friendlist WHERE friends = ARRAY['Sam2'];



ALTER TABLE friendlist ADD CONSTRAINT uniqueuname UNIQUE (uname);


UPDATE friendlist SET friends = array_append(friends, 'Sam2') WHERE uname = 'nathan';


//SELECT name FROM userprofile WHERE login = (SELECT friends FROM friendlist WHERE uname = 'nathan')'Sam';

 
CREATE INDEX index_name on table_name (column_name);

FOREACH i IN SELECT friends FROM friendlist WHERE uname = 'nathan'
LOOP 
  SELECT name FROM userprofile WHERE login = i
END LOOP;

CREATE TYPE publishitem AS (
    content varchar(200) ,
    publishtime       timestamp 
);

CREATE TABLE publishs(usrname character(15) references userprofile(login) not null  , shows publishitem[]);

ALTER TABLE publishs ADD CONSTRAINT uniqueuname UNIQUE (usrname);

CREATE FUNCTION scan_rows(int[]) RETURNS void AS $$
DECLARE
  x int[];
BEGIN
  FOREACH x SLICE 1 IN ARRAY $1
  LOOP
    RAISE NOTICE 'row = %', x;
  END LOOP;
END;
$$ LANGUAGE plpgsql;

SELECT scan_rows(ARRAY[[1,2,3],[4,5,6],[7,8,9],[10,11,12]]);

NOTICE:  row = {1,2,3}
NOTICE:  row = {4,5,6}
NOTICE:  row = {7,8,9}
NOTICE:  row = {10,11,12}


BEGIN
    SELECT * INTO STRICT myrec FROM emp WHERE empname = myname;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE EXCEPTION 'employee % not found', myname;
        WHEN TOO_MANY_ROWS THEN
            RAISE EXCEPTION 'employee % not unique', myname;
END;

RETURN NEXT expression;
RETURN QUERY query;
RETURN QUERY EXECUTE command-string [ USING expression [, ... ] ];

SELECT friends FROM friendlist WHERE uname = 'nathan';



CREATE TABLE foo (fooid INT, foosubid INT, fooname TEXT);
INSERT INTO foo VALUES (1, 2, 'three');
INSERT INTO foo VALUES (4, 5, 'six');

CREATE OR REPLACE FUNCTION getAllFoo() RETURNS SETOF foo AS
$BODY$
DECLARE
    r foo%rowtype;
BEGIN
    FOR r IN SELECT * FROM foo
    WHERE fooid > 0
    LOOP
        -- can do some processing here
        RETURN NEXT r; -- return current row of SELECT
    END LOOP;
    RETURN;
END
$BODY$
LANGUAGE plpgsql;

SELECT * FROM getallfoo();


CREATE OR REPLACE FUNCTION array_round(float[], int) RETURNS float[] AS $$ DECLARE arrFloats ALIAS FOR $1; roundParam ALIAS FOR $2; retVal float[]; BEGIN FOR I IN array_lower(arrFloats, 1)..array_upper(arrFloats, 1) LOOP retVal[I] := round(CAST(arrFloats[I] as numeric), roundParam); END LOOP; RETURN retVal; END; $$ LANGUAGE plpgsql STABLE RETURNS NULL ON NULL INPUT;

> SELECT array_agg(ROUND(n, 2)) FROM unnest(ARRAY[1.53224,0.23411234]) AS n; array_agg ------------- {1.53,0.23} (1 row)

SELECT array_agg(upper(n)) FROM unnest(SELECT friends FROM friendlist WHERE uname = 'nathan') AS n; 
array_agg ------------- {1.53,0.23} (1 row)

SELECT  *  FROM (SELECT friends FROM friendlist WHERE uname = 'nathanâ€™) AS n; 



!!! SELECT height FROM userprofile WHERE login in (SELECT unnest(friends) FROM friendlist WHERE uname = 'nathan');






SELECT friends FROM friendlist WHERE uname = 'nathan';

SELECT unnest(friends) FROM friendlist WHERE uname = 'nathan';

 (SELECT unnest(friends) FROM friendlist WHERE uname = 'nathan')

// query penyyouquan
 SELECT shows FROM publishs WHERE usrname in (SELECT unnest(friends) FROM friendlist WHERE uname = 'nathan');

SELECT shows[1].content FROM publishs WHERE usrname in (SELECT unnest(friends) FROM friendlist WHERE uname = 'nathan');

// real fa pengyouquan
UPDATE publishs SET shows = array_append(shows, ROW('my cloth', TIMESTAMP '2013-05-16 15:36:38')::publishitem) WHERE usrname = 'Sam2';


// fa penguyouquan
INSERT INTO publishs VALUES ('Sam',ARRAY[ROW('my selfridge', TIMESTAMP '2011-05-16 15:36:38')::publishitem]);


SELECT shows[1]  FROM publishs WHERE usrname = 'Sam';

SELECT shows[1].content  FROM publishs WHERE usrname = 'Sam';


'Sam'

'my selfridge'
 (TIMESTAMP '2011-05-16 15:36:38')

// kan pengyouquan
 SELECT usrname, unnest(shows)  FROM publishs WHERE usrname in (SELECT unnest(friends) FROM friendlist WHERE uname = 'nathan');

 SELECT showitem.content WHERE showitem in (SELECT unnest(shows) FROM publishs WHERE usrname in (SELECT unnest(friends) FROM friendlist WHERE uname = 'nathan'));



SELECT usrname,(unnest(shows)).content,(unnest(shows)).publishtime AS ptime FROM publishs WHERE usrname in (SELECT unnest(friends) FROM friendlist WHERE uname = 'nathan') ORDER BY ptime DESC LIMIT 20;
